class d{static parse(s,n){if(!s)return null;const c=s.split(/[/|:|\s]/).map(t=>Number(t));if(c.some(t=>isNaN(t)||Math.floor(t)!==t))return null;const f=n.split(/[/|:|\s]/);let u=!1;const a=(t,r,i,l=0)=>{if(!u){if(r<l||r>i){u=!0;return}t(r)}};let e=0;for(const t of f)(t==="dd"||t==="MM"||t==="yyyy"||t==="HH"||t==="mm"||t==="ss")&&e++;const o=new d(new Date(0)).startOfDay().toDate();return c.forEach((t,r)=>{r>=f.length||(f[r]==="dd"?(e--,a(i=>o.setDate(i),t,31,1)):f[r]==="MM"?(e--,a(i=>o.setMonth(i),t-1,11)):f[r]==="yyyy"?(t<1e3&&(u=!0),e--,a(i=>o.setFullYear(i),t,9999,1)):f[r]==="HH"?(e--,a(i=>o.setHours(i),t,23)):f[r]==="mm"?(e--,a(i=>o.setMinutes(i),t,59)):f[r]==="ss"&&(e--,a(i=>o.setSeconds(i),t,59)))}),u||e!=0?null:new d(o)}static workingDaysBetweenDates(s,n,c){if(n<s)return 0;let f=0;for(let i=0;i<c.length;i++){const l=c[i];if(l){const h=l.getDay();l>=s&&l<=n&&h!==0&&h!==6&&f++}}const u=86400*1e3;s.setHours(0,0,0,1),n.setHours(23,59,59,999);const a=n.getTime()-s.getTime();let e=Math.ceil(a/u);const o=Math.floor(e/7);e=e-o*2;const t=s.getDay(),r=n.getDay();return t-r>1&&(e=e-2),t===0&&r!==6&&(e=e-1),r===6&&t!==0&&(e=e-1),e-f}constructor(s=new Date){let n;s instanceof d?n=s.dt:n=s,this.dt=new Date(n)}toDate(){return new Date(this.dt)}isSame(s){return this.dt.getTime()===s.dt.getTime()}startOfDay(){const s=new Date(this.dt);return s.setMilliseconds(0),s.setSeconds(0),s.setMinutes(0),s.setHours(0),new d(s)}format(s){const n=(o,t=2)=>{let r=o.toString(10);for(;r.length<t;)r="0"+r;return r},c=this.dt.getDate(),f=this.dt.getMonth()+1,u=this.dt.getFullYear(),a=this.dt.getHours();let e=s;if(e=e.replace("dd",n(c)).replace("MM",n(f)).replace("yyyy",n(u,4)).replace("HH",n(this.dt.getHours())).replace("mm",n(this.dt.getMinutes())).replace("ss",n(this.dt.getSeconds())),e.indexOf("hh")>-1){const o=a%12;e.replace("hh",n(o===0?12:o)),e+=a<=11?" AM":" PM"}return e}toString(){return`[DateHelper ${this.dt}]`}formattedDate(){return this.dt?new d(this.dt).format("dd/MM/yyyy"):""}formattedDateHour(){return this.dt?new d(this.dt).format("dd/MM/yyyy HH:mm"):""}formattedHour(){return this.dt?new d(this.dt).format("HH:mm"):""}}function m(y,s){return new d(y).format(s)}export{d as D,m as g};
